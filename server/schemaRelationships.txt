# Model Relationships Analysis

## Current Model Relationships

### User Model
- **Has One** CraftProfile (via `craftProfile` reference)
- **Has One** Business (via `businessProfile` reference)
- **Role Types**: 'artisan', 'customer', 'shop_admin', 'platform_admin'

### Business Model
- **Belongs To** User (via `owner` reference)
- **Has Many** Products (inverse relationship, products reference business)
- **Has One** BusinessOnboarding (inverse relationship)

### BusinessOnboarding Model
- **Belongs To** Business (via `business` reference)
- **Belongs To** User (via `owner` reference)

### CraftProfile Model
- **Belongs To** User (via `user` reference)
- **Referenced By** Product (via `craftProfile` reference)

### Product Model
- **Belongs To** Business (via `business` reference)
- **Belongs To** User/Artisan (via `artisan` reference)
- **Has One** CraftProfile (via `craftProfile` reference)

## Relationship Flow Analysis

1. **User → Business Flow**
   - User creates a Business profile
   - Business references back to owner (User)
   - BusinessOnboarding process tracks the setup

2. **User → CraftProfile Flow**
   - Artisan-type Users create CraftProfile
   - CraftProfile links to Products they create

3. **Product Creation Flow**
   - Product links to Business
   - Product links to Artisan (User)
   - Product optionally links to CraftProfile

## Strengths of Current Design

1. Clear ownership hierarchies
2. Proper use of MongoDB references
3. Good separation of concerns between business and craft aspects
4. Comprehensive tracking of business onboarding process
5. Flexible product categorization and search capabilities

## Potential Issues and Recommendations

1. **Redundant References**
   - Products reference both `business` and `artisan`, while Business already has an owner
   - Consider whether both are necessary or if one could be derived through relationship

2. **Missing Reverse References**
   - Business model doesn't track its products
   - Consider adding `products` array in Business schema if you need to query all products of a business frequently

3. **Consistency Checks**
   - Add validation to ensure `artisan` referenced in Product matches the `owner` of the referenced `business`
   - Add validation to ensure User role is 'artisan' when creating CraftProfile

4. **Index Optimization**
   ```javascript
   // Add to Business Schema
   businessSchema.index({ owner: 1 });
   
   // Add to Product Schema
   productSchema.index({ business: 1, artisan: 1 });
   
   // Add to CraftProfile Schema
   craftProfileSchema.index({ user: 1 });
   ```

5. **Suggested Additional Fields**
   ```javascript
   // In Business Schema
   products: [{
       type: mongoose.Schema.Types.ObjectId,
       ref: 'Product'
   }]
   
   // In User Schema
   products: [{
       type: mongoose.Schema.Types.ObjectId,
       ref: 'Product'
   }]
   ```

## Common Query Patterns

```javascript
// Get all products for a business with artisan details
const products = await Product.find({ business: businessId })
    .populate('artisan')
    .populate('craftProfile');

// Get business details with owner information
const business = await Business.findById(businessId)
    .populate('owner');

// Get user with their business and craft profile
const user = await User.findById(userId)
    .populate('businessProfile')
    .populate('craftProfile');
```